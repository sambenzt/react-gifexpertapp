{"version":3,"sources":["AddCategory.js","GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","length","categories","type","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","setTimeout","GifGrid","image","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEXC,mBAAS,IAFE,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAkBrC,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAMK,OAAS,IACfP,GAAc,SAAAQ,GAAU,OAAKN,GAAL,mBAAeM,OACvCL,EAAS,MAMb,SACI,uBACID,MAAQA,EACRO,KAAK,OACLC,SAnBS,SAACL,GACnBF,EAASE,EAAEM,OAAOT,a,QCKVU,EAXK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC1B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCNJK,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DAEJ,mCAETN,EAJa,iDAIoCK,EAJpC,6BAEJ,oCAFI,SAMAE,MAAMP,GANN,cAMbQ,EANa,gBAQIA,EAAKC,OART,uBAQXC,EARW,EAQXA,KARW,kBAUZA,EAAKC,KAAI,SAAAC,GAAG,MAAK,CACpBC,GAAID,EAAIC,GACRd,MAAOa,EAAIb,MACXC,IAAKY,EAAIE,OAAOC,iBAAiBf,SAblB,4CAAH,sDC4BLgB,EAxBM,SAACX,GAAc,IAAD,EAELlB,mBAAS,CAC/BuB,KAAM,GACNO,SAAS,IAJkB,mBAExBC,EAFwB,KAEjBC,EAFiB,KAoB/B,OAbAC,qBAAU,WACNhB,EAAQC,GACHgB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEd,UAEZ,CAACZ,IAGGa,GCIIM,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,EAECW,EAAaX,GAAhCS,EAFkB,EAEvBJ,KAAaO,EAFU,EAEVA,QAEpB,OACI,sBAAKhB,UAAU,8CAAf,UAGQgB,GAAW,mBAAGhB,UAAU,mCAAb,yBAIXa,EAAOH,KAAI,SAAAc,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAMZ,WCSpBa,EAtBM,SAAAC,GAAU,IAAD,EAEUxC,mBAAS,CAAC,YAFpB,mBAEnBO,EAFmB,KAEPR,EAFO,KAI1B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQQ,EAAWiB,KAAI,SAAAN,GAAQ,OACnB,cAAC,EAAD,CAASA,SAAWA,GAAiBA,Y,MCX7DuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ce121aac.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { PropTypes } from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [value, setValue] = useState('');\n\n    const handleChange = (e) => {\n       setValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n       \n        if( value.length > 2 ) {\n            setCategories(categories => [value, ...categories]);\n            setValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                value={ value } \n                type=\"text\"\n                onChange={ handleChange }\n             />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","import React from 'react'\n\nconst GifGridItem = ({ title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n\n\n\nexport default GifGridItem\n","export const getGifs = async(category) => {\n\n    const apiKey = 'DOF36ev4DbGWdwViuX0eZ6Mrvw2nMl59';\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ category }&limit=10&api_key=${ apiKey }`\n    \n    const resp = await fetch(url);\n\n    const { data } = await resp.json();\n\n    return data.map(img => ({\n        id: img.id,\n        title: img.title, \n        url: img.images.downsized_medium.url\n    }));\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\n\nconst useFetchGifs = (category) => {\n   \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                }, 2000);\n            })\n    }, [category]);\n\n\n    return state;\n}\n\n\nexport default useFetchGifs\n","import React from 'react'\nimport GifGridItem from './GifGridItem';\nimport useFetchGifs from './hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <div className=\"card-grid animate__animated animate__fadeIn\">\n\n            {\n                loading && <p className=\"animate__animated animate__flash\">Cargando...</p>\n            }\n\n            {\n                images.map(image => (\n                    <GifGridItem \n                        key={image.id} \n                        {...image}\n                    >\n                    </GifGridItem>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default GifGrid\n","import React, { useState } from 'react'\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\n\nconst GifExpertApp = props => {\n\n    const [categories, setCategories] = useState(['Nirvana']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid category={ category } key={ category }></GifGrid>\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}